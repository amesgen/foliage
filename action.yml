name: Foliage

description: Create a Haskell package repository

inputs:
  config:
    description: Path to the repository config file
    default: config.toml

  version:
    description: Foliage version to use
    default: latest

outputs:
  repository-path:
    description: Path to the generated repository
    value: ${{ steps.generate-repository.outputs.repository-path }}

runs:
  # I am using a composite actions because
  # 1. Docker seems excessive
  # 2. I dislike javascript tooling
  using: "composite"

  steps:

    - name: Setup foliage tool
      uses: actions/github-script@v6
      with:
        script: |
          const tc = require('@actions/tool-cache')

          let version = core.getInput('version')
          if (!version || version == 'latest') {
            const res = await github.rest.repos.getLatestRelease({
              owner: "andreabedini",
              repo: "foliage"
            })
            version = res.name
          } else {
            version = `v${version}`
          }

          let toolPath = tc.find('foliage', version)
          if (!toolPath) {
            const toolUrl = `https://github.com/andreabedini/foliage/releases/download/${version}/foliage-${version}-Linux`
            const downloadPath = await tc.downloadTool(toolUrl)
            toolPath = await tc.cacheFile(downloadPath, 'foliage', 'foliage', version)
          }
          core.addPath(toolPath)

    - name: Generate repository
      id: generate-repository
      uses: actions/github-script@v6
      with:
        script: |
          const configPath = core.getInput('config')
          await exec.exec('foliage', ['--config', configPath]);

          const process = require('process');
          core.setOutput('repository-path', `${process.cwd()}/_repo`);
